# Last War Nexus - Development Prompt

## Project Overview
Last War Nexus is a VS Points & Arms Race optimizer for the mobile game "Last War: Survival". It helps players maximize their VS Points efficiency by tracking Arms Race phases and Alliance Duel alignment windows.

## üö® CRITICAL DEVELOPMENT PRINCIPLES

### 1. FUNCTIONALITY FIRST - ALWAYS
- **Maintaining existing functionality is the absolute top priority**
- **Never break working features for the sake of improvements**
- **Test thoroughly before committing any changes**
- **When in doubt, preserve the current working state**

### 2. SYNTAX VALIDATION IS MANDATORY
- **Always validate JavaScript syntax**: `node -c filename.js`
- **Check for literal `\n` characters that should be actual newlines**
- **Verify all function references exist before calling them**
- **Test CSS parsing to ensure no syntax errors**

### 3. DEFENSIVE PROGRAMMING
- **Check DOM elements exist before manipulating them**
- **Use try-catch blocks around critical operations**
- **Add console logging for debugging complex issues**
- **Handle edge cases gracefully**

## üìã Key Features
- **Real-time Arms Race phase tracking** (5 phases, 4-hour cycles)
- **VS Day alignment detection** (Monday-Saturday themes)
- **Priority window identification** (4x VS Points opportunities)
- **Mobile-optimized responsive design**
- **Guide navigation system** (General Tips / Seasonal Guides)
- **Settings management** with timezone adjustments

## üõ† Technical Stack
- **Vanilla JavaScript** (ES6+, single class architecture)
- **CSS3** with CSS variables and media queries
- **HTML5** with semantic structure and accessibility
- **Progressive Web App** features (manifest, service worker)

## üì± Device Support
- **Primary: Mobile devices** (iOS Safari, Android Chrome)
- **Secondary: Desktop browsers** (Chrome, Firefox, Safari, Edge)
- **Touch-first design** with 44px minimum touch targets
- **Responsive breakpoints**: 768px, 480px, 360px

## üéØ Core Functionality Requirements

### Data Loading & Display:
- VS Points calculation and phase tracking
- Real-time countdown timers
- Priority window detection
- Schedule generation for full weeks

### User Interface:
- Tab navigation (Priority Windows, Event Schedule, Strategy Guides)
- Guide type switching (General Tips, Seasonal Guides)
- Settings dropdown with timezone controls
- Time display toggle (Local/Server time)

### Mobile Experience:
- Smooth scrolling and touch interactions
- Properly positioned dropdowns and overlays
- Readable text and accessible touch targets
- Optimized spacing and layout

## ‚ö†Ô∏è Common Pitfalls to Avoid

### JavaScript Issues:
- **Literal `\n` in strings** instead of actual newlines
- **Calling undefined functions** or methods
- **DOM manipulation before elements exist**
- **Unhandled errors breaking initialization**

### CSS Problems:
- **Off-screen dropdown positioning**
- **Missing mobile responsiveness**
- **Z-index conflicts with overlays**
- **Broken media query syntax**

### Functionality Regressions:
- **Guide navigation buttons not working**
- **Settings menu positioning incorrectly**
- **Data not loading due to initialization errors**
- **Mobile scrolling issues**

## üîß Development Workflow

### Before Starting:
1. Understand the current working state
2. Identify the minimal change needed
3. Plan how to preserve existing functionality
4. Consider mobile-first approach

### During Development:
1. Make small, incremental changes
2. Test each change immediately
3. Validate syntax after each edit
4. Check both desktop and mobile behavior

### Before Committing:
1. Run `node -c app.js` to validate syntax
2. Test all core functionality manually
3. Check console for errors or warnings
4. Verify mobile responsiveness
5. Ensure no regressions introduced

## üìö Code Architecture

### Main Application (`app.js`):
- `VSPointsOptimizer` class handles all functionality
- `init()` method manages startup sequence
- Event delegation for dynamic content
- Error handling throughout critical paths

### Styling (`style.css`):
- CSS variables for consistent theming
- Mobile-first responsive design
- Component-based organization
- Progressive enhancement approach

### Structure (`index.html`):
- Semantic HTML5 markup
- Accessibility attributes (ARIA, roles)
- Progressive Web App metadata
- Clean, maintainable structure

## üé® Design System

### Colors:
- Primary: `#00d4ff` (accent blue)
- Background: `#0a0e13` (dark base)
- Text: `#ffffff` (primary), `#b8bfc7` (secondary)
- Success: `#00ff88`, Warning: `#ffb800`, Error: `#ff4757`

### Typography:
- Font: Inter (web font)
- Scale: 0.75rem - 2rem
- Weight: 400-700
- Line height: 1.5

### Spacing:
- Base unit: 4px
- Scale: xs(4), sm(8), md(12), lg(16), xl(24), 2xl(32)

### Components:
- Cards with glass morphism effects
- Buttons with proper touch targets
- Dropdowns with safe positioning
- Navigation with clear states

## üöÄ Performance Considerations
- Efficient DOM updates (batch changes)
- Optimized update intervals (5s data, 1s countdowns)
- Minimal reflows and repaints
- Touch-optimized interactions

## üîç Testing Strategy
- **Manual testing** on multiple devices/browsers
- **Console monitoring** for errors and warnings
- **Functionality verification** after each change
- **Regression testing** of core features

## üìù Documentation Standards
- Clear, descriptive commit messages
- Inline comments for complex logic
- Update this prompt with lessons learned
- Maintain CLAUDE.md with development guidelines

## üíº COLLABORATIVE WORKFLOW & ENVIRONMENT

### Working Directory Setup:
- **Primary Development:** `/home/tweak/last-war-nexus/` (WSL Linux environment)
- **Windows Access:** `/mnt/c/Users/tw33k/OneDrive/Documents/GitHub/last-war-nexus/`
- **Publish Script:** `C:\Users\tw33k\publish_changes.bat` (Windows batch file)
- **Visual Feedback:** Screenshots in `C:\Users\tw33k\` (pic##.jpg files)

### Design Feedback Loop:
1. **User provides visual feedback** via screenshots showing layout issues
2. **Analyze layout problems** using CSS debugging and visual inspection
3. **Make targeted fixes** preserving functionality while improving design
4. **Test across breakpoints** to ensure responsive behavior
5. **Commit and publish** using ASCII-only batch file for reliability

### Established Design Patterns:
- **Desaturated color palette** (20% less saturation for professional look)
- **Glass effects only on accent elements** (VS Points Optimizer title)
- **Clean navigation focus states** (left border only, no outer glows)
- **Consistent card spacing** using flexbox gap instead of margins
- **Mobile-first scaling** (2x text size for important countdown elements)

## üé® RECENT DESIGN SOLUTIONS & PATTERNS

### 1. **Card Layout Consistency**
- **Problem:** Uneven card heights in grid layouts
- **Solution:** Extend content descriptions to match longest card
- **Implementation:** Add more descriptive text maintaining same structure
- **Example:** Season 1 description extended to match other seasons

### 2. **Navigation Button Focus States**
- **Problem:** Unwanted blue outer glows on desktop navigation
- **Solution:** Remove from global focus rules, add specific overrides
- **Pattern:** `.tab-btn:focus { outline: none !important; box-shadow: none !important; }`
- **Result:** Clean left-side blue indicator only

### 3. **Mobile Layout Optimization**
- **Problem:** Title elements wrapping on mobile with glass effects
- **Solution:** Flex layout with text overflow controls
- **Pattern:** `flex: 1; min-width: 0; white-space: nowrap; text-overflow: ellipsis;`
- **Mobile scaling:** Font sizes reduced appropriately (1rem, 0.75rem, 0.7rem)

### 4. **Spacing Consistency**
- **Problem:** Irregular gaps between cards due to individual margins
- **Solution:** Remove individual margins, use flexbox gap property
- **Pattern:** `.main-cards { gap: var(--spacing-md); }` 
- **Result:** Uniform spacing matching left and right sides

### 5. **Batch File Publishing**
- **Problem:** Unicode characters causing Windows CMD errors
- **Solution:** ASCII-only commit messages and clean batch structure
- **Critical:** Never use emojis or Unicode in Windows batch files
- **Pattern:** Simple, descriptive ASCII-only commit messages

## üö® SESSION-SPECIFIC LESSONS LEARNED

### 1. **Windows Batch File Compatibility**
- Complex Unicode commit messages cause encoding errors
- Keep batch files simple with ASCII-only content
- User sees garbled text output when Unicode characters are used
- Simple commit messages work reliably across all systems

### 2. **Mobile Title Layout**
- Glass effects on mobile require careful width management
- Use row layout with flex controls rather than column stacking
- Scale text appropriately: title (1rem), time (0.75rem), live (0.7rem)
- Ensure all elements fit on single line with overflow handling

### 3. **Card Height Alignment**
- Visual consistency requires equal heights in card grids
- Extend content descriptions rather than using min-height
- Maintain similar word count and structure across parallel elements
- Test visual alignment using screenshots for verification

### 4. **Focus State Management**
- Global focus styles can interfere with specific component needs
- Use specific selectors with !important to override globals
- Remove unwanted effects (outline, box-shadow) explicitly
- Maintain accessibility while cleaning up visual appearance

### 5. **Spacing Debugging Approach**
- Visual inspection via screenshots reveals subtle spacing issues
- Individual margins create inconsistent gaps
- Flexbox gap property provides uniform spacing
- Test spacing consistency across left/right columns

---

**GOLDEN RULE: If it's working, be extremely careful about changing it. If it's not working, fix it with the minimal possible change.**